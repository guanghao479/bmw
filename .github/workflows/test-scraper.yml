name: Test Database-Direct Scraper Pipeline

on:
  workflow_dispatch:
    inputs:
      test_sources:
        description: 'Test specific sources from database (all sources now managed dynamically)'
        required: false
        default: 'all'
      run_full_scrape:
        description: 'Run full scraping process'
        required: false
        default: 'false'
        type: boolean

jobs:
  test-scraper:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: backend/go.sum

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2

    - name: Install dependencies
      working-directory: backend
      run: go mod download

    - name: Run unit tests
      working-directory: backend
      run: go test ./... -v

    - name: Run integration tests (if enabled)
      if: inputs.run_full_scrape == 'true'
      working-directory: backend
      run: |
        # Set up environment variables for new architecture
        export AWS_REGION=us-west-2
        export FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY }}
        export FAMILY_ACTIVITIES_TABLE=seattle-family-activities
        export SOURCE_MANAGEMENT_TABLE=seattle-source-management
        export ADMIN_EVENTS_TABLE=seattle-admin-events

        # Run integration tests
        go test ./internal/services -v -tags=integration -timeout=10m

    - name: Test database connectivity and API endpoints
      working-directory: backend
      run: |
        # Test DynamoDB connectivity
        echo "Testing DynamoDB connectivity..."
        aws dynamodb describe-table --table-name seattle-family-activities --region us-west-2
        aws dynamodb describe-table --table-name seattle-source-management --region us-west-2
        aws dynamodb describe-table --table-name seattle-admin-events --region us-west-2

        # Test API Gateway endpoints
        echo "Testing API Gateway endpoints..."
        API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
        API_URL="https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/"
        echo "API URL: $API_URL"

        # Test approved events endpoint (main frontend)
        echo "Testing approved events endpoint..."
        APPROVED_RESPONSE=$(curl -s "${API_URL}api/events/approved" || echo '{"error": "not accessible"}')
        echo "Approved events response: $APPROVED_RESPONSE"

        # Test active sources endpoint (admin interface)
        echo "Testing active sources endpoint..."
        SOURCES_RESPONSE=$(curl -s "${API_URL}api/sources/active" || echo '{"error": "not accessible"}')
        echo "Active sources response: $SOURCES_RESPONSE"

        # Check S3 backup (optional)
        echo "Checking S3 backup status..."
        if aws s3 ls s3://seattle-family-activities-mvp-data-usw2/events/ --region us-west-2; then
          echo "✅ S3 backup accessible"
        else
          echo "ℹ️ S3 backup not populated yet (normal for database-direct flow)"
        fi

    - name: Manual Lambda invocation
      if: inputs.run_full_scrape == 'true'
      run: |
        echo "Invoking Lambda function for full scrape..."
        aws lambda invoke \
          --function-name seattle-family-activities-scraping-orchestrator \
          --payload '{}' \
          --region us-west-2 \
          response.json
        
        cat response.json
        
        # Check if invocation was successful
        if grep -q '"StatusCode": 200' response.json; then
          echo "✅ Lambda invocation successful"
        else
          echo "❌ Lambda invocation failed"
          exit 1
        fi

    - name: Verify database data after scraping
      if: inputs.run_full_scrape == 'true'
      run: |
        # Wait for processing to complete
        sleep 15

        # Check database API for updated data
        API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
        API_URL="https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/"

        # Check approved events
        echo "Checking approved events in database..."
        APPROVED_RESPONSE=$(curl -s "${API_URL}api/events/approved")
        echo "API Response: $APPROVED_RESPONSE"

        if echo "$APPROVED_RESPONSE" | jq -e '.success' >/dev/null 2>&1; then
          approved_count=$(echo "$APPROVED_RESPONSE" | jq '.data | length')
          echo "Approved events count: $approved_count"

          if [ "$approved_count" -gt 0 ]; then
            echo "✅ Database contains approved events"
          else
            echo "ℹ️ No approved events yet (normal - events need admin approval)"
          fi
        else
          echo "⚠️ API response indicates no success field or error"
        fi

        # Check pending events
        echo "Checking pending events..."
        PENDING_RESPONSE=$(curl -s "${API_URL}api/events/pending")
        if echo "$PENDING_RESPONSE" | jq -e '.success' >/dev/null 2>&1; then
          pending_count=$(echo "$PENDING_RESPONSE" | jq '.data | length')
          echo "Pending events count: $pending_count"

          if [ "$pending_count" -gt 0 ]; then
            echo "✅ Scraping successful - found $pending_count pending events for review"
          else
            echo "⚠️ No pending events found after scraping"
          fi
        fi

    - name: Database data quality check
      run: |
        # Get data from database API
        API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
        API_URL="https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/"

        echo "Performing database data quality checks..."

        # Get approved events from database
        APPROVED_DATA=$(curl -s "${API_URL}api/events/approved")

        if echo "$APPROVED_DATA" | jq -e '.success' >/dev/null 2>&1; then
          # Check data quality from database
          total_activities=$(echo "$APPROVED_DATA" | jq '.data | length')
          echo "Total approved events in database: $total_activities"

          if [ "$total_activities" -gt 0 ]; then
            # Check required fields
            required_events=$(echo "$APPROVED_DATA" | jq '[.data[] | select(.title and .location)] | length')
            echo "Events with required fields: $required_events/$total_activities"

            # Check for variety in sources
            unique_sources=$(echo "$APPROVED_DATA" | jq -r '[.data[].source.url] | unique | length')
            echo "Unique source URLs: $unique_sources"

            if [ "$required_events" -eq "$total_activities" ]; then
              echo "✅ All approved events have required fields"
            else
              echo "⚠️ Some events missing required fields"
            fi
          else
            echo "ℹ️ No approved events in database yet (normal for new deployment)"
          fi
        else
          echo "⚠️ Unable to retrieve approved events data"
        fi

        # Check active sources
        SOURCES_DATA=$(curl -s "${API_URL}api/sources/active")
        if echo "$SOURCES_DATA" | jq -e '.success' >/dev/null 2>&1; then
          sources_count=$(echo "$SOURCES_DATA" | jq '.data | length')
          echo "Active sources in database: $sources_count"

          if [ "$sources_count" -gt 0 ]; then
            echo "✅ Database contains active sources"
          else
            echo "ℹ️ No active sources (sources must be added via admin interface)"
          fi
        fi

    - name: Test API data compatibility with frontend
      run: |
        # Test database API data structure for frontend compatibility
        API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
        API_URL="https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/"

        echo "Testing API data compatibility with frontend..."

        # Get data from database API
        API_DATA=$(curl -s "${API_URL}api/events/approved")

        if echo "$API_DATA" | jq -e '.success' >/dev/null 2>&1; then
          # Check API response structure
          if echo "$API_DATA" | jq -e '.data' > /dev/null; then
            echo "✅ API returns data array"
          else
            echo "❌ Missing data array in API response"
            exit 1
          fi

          # Check if we have events to test
          events_count=$(echo "$API_DATA" | jq '.data | length')
          if [ "$events_count" -gt 0 ]; then
            # Check sample event structure
            sample_event=$(echo "$API_DATA" | jq '.data[0]')
            if echo "$sample_event" | jq -e '.title and .location' > /dev/null; then
              echo "✅ Event structure is compatible with frontend"
            else
              echo "❌ Event structure incompatible with frontend"
              exit 1
            fi

            # Check location structure
            if echo "$sample_event" | jq -e '.location.name' > /dev/null; then
              echo "✅ Location structure is compatible"
            else
              echo "❌ Location structure incompatible"
            fi

          else
            echo "ℹ️ No events to test structure (normal for new deployment)"
            echo "✅ API endpoint is accessible and returns correct format"
          fi
        else
          echo "❌ API response missing success field or invalid"
          exit 1
        fi

        echo "✅ Database API is compatible with frontend expectations"