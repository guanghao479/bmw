name: Deploy Seattle Family Activities MVP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend infrastructure and Lambda'
        required: false
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend to GitHub Pages'
        required: false
        default: 'true'
        type: boolean

jobs:
  # Backend deployment - CDK Infrastructure and Lambda
  deploy-backend:
    if: github.event_name == 'workflow_dispatch' && inputs.deploy_backend == true || github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infrastructure/package-lock.json

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: backend/go.sum

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2

    - name: Install CDK dependencies
      working-directory: infrastructure
      run: npm ci

    - name: Install Go dependencies
      working-directory: backend
      run: go mod download

    - name: Run Go unit tests
      working-directory: backend
      run: go test ./internal/models ./internal/services -v
      env:
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
    
    - name: Run critical integration tests
      working-directory: backend
      run: go test -tags=integration ./internal/services -v -run TestFireCrawl
      env:
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}

    - name: Deploy CDK infrastructure
      working-directory: infrastructure
      run: |
        npx cdk deploy --require-approval never --outputs-file outputs.json
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        CDK_DEFAULT_REGION: us-west-2
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}

    - name: Test Lambda functions deployment
      timeout-minutes: 3
      run: |
        echo "Testing Lambda functions deployment..."

        # Check Scraping Orchestrator function
        echo "Checking Scraping Orchestrator Lambda..."
        aws lambda get-function \
          --function-name seattle-family-activities-scraping-orchestrator \
          --region us-west-2 > orchestrator-info.json

        echo "‚úÖ Orchestrator Lambda deployed successfully"
        echo "Runtime: $(jq -r '.Configuration.Runtime' orchestrator-info.json)"
        echo "Timeout: $(jq -r '.Configuration.Timeout' orchestrator-info.json)s"
        echo "Memory: $(jq -r '.Configuration.MemorySize' orchestrator-info.json)MB"

        # Check Admin API function
        echo "Checking Admin API Lambda..."
        aws lambda get-function \
          --function-name seattle-family-activities-admin-api \
          --region us-west-2 > admin-api-info.json

        echo "‚úÖ Admin API Lambda deployed successfully"
        echo "Runtime: $(jq -r '.Configuration.Runtime' admin-api-info.json)"
        echo "Timeout: $(jq -r '.Configuration.Timeout' admin-api-info.json)s"
        echo "Memory: $(jq -r '.Configuration.MemorySize' admin-api-info.json)MB"

        # Test orchestrator function with empty payload (safe test)
        echo "üöÄ Testing orchestrator function (async)..."
        aws lambda invoke \
          --function-name seattle-family-activities-scraping-orchestrator \
          --invocation-type Event \
          --payload '{}' \
          --region us-west-2 \
          orchestrator-response.json

        echo "‚úÖ Lambda functions deployed and tested successfully"
        echo "Note: Results will be available via database API"

    - name: Test Database API and Infrastructure
      run: |
        echo "Testing database-direct API infrastructure..."

        # Get API Gateway URL from CDK outputs
        if [ -f "infrastructure/outputs.json" ]; then
          API_URL=$(jq -r '.SeattleFamilyActivitiesMVPStack.AdminApiUrl' infrastructure/outputs.json)
          echo "API URL from CDK outputs: $API_URL"
        else
          echo "CDK outputs file not found, getting API URL from AWS CLI..."
          API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
          API_URL="https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/"
          echo "API URL from AWS CLI: $API_URL"
        fi

        # Test DynamoDB tables
        echo "Testing DynamoDB tables..."
        aws dynamodb describe-table --table-name seattle-family-activities --region us-west-2 > /dev/null
        echo "‚úÖ FamilyActivitiesTable accessible"

        aws dynamodb describe-table --table-name seattle-source-management --region us-west-2 > /dev/null
        echo "‚úÖ SourceManagementTable accessible"

        aws dynamodb describe-table --table-name seattle-admin-events --region us-west-2 > /dev/null
        echo "‚úÖ AdminEventsTable accessible"

        # Test approved events endpoint (main frontend data source)
        echo "Testing GET /api/events/approved endpoint..."
        EVENTS_RESPONSE=$(curl -s "${API_URL}api/events/approved" -w "HTTP_CODE:%{http_code}" || echo "ERROR:Connection failed")

        if echo "$EVENTS_RESPONSE" | grep -q "HTTP_CODE:200"; then
          # Remove HTTP code from response
          CLEAN_RESPONSE=$(echo "$EVENTS_RESPONSE" | sed 's/HTTP_CODE:200$//')
          echo "‚úÖ API returned HTTP 200"

          if echo "$CLEAN_RESPONSE" | jq . >/dev/null 2>&1; then
            echo "‚úÖ Database API responding with valid JSON"

            if echo "$CLEAN_RESPONSE" | jq -e '.success' >/dev/null 2>&1; then
              EVENTS_COUNT=$(echo "$CLEAN_RESPONSE" | jq '.data | length' 2>/dev/null || echo "0")
              echo "Number of approved events in database: $EVENTS_COUNT"
              echo "‚úÖ Database API is working correctly"
            else
              echo "‚ÑπÔ∏è API responding but no approved events yet (normal for new deployment)"
            fi
          else
            echo "‚ö†Ô∏è API response is not valid JSON: $CLEAN_RESPONSE"
          fi
        else
          echo "‚ö†Ô∏è API not accessible yet - Response: $EVENTS_RESPONSE"
          echo "This is normal immediately after deployment - Lambda cold start may take time"
        fi

        # Test active sources endpoint (admin interface)
        echo "Testing GET /api/sources/active endpoint..."
        SOURCES_RESPONSE=$(curl -s "${API_URL}api/sources/active" || echo "{}")
        if echo "$SOURCES_RESPONSE" | jq -e '.success' >/dev/null 2>&1; then
          SOURCES_COUNT=$(echo "$SOURCES_RESPONSE" | jq '.data | length' 2>/dev/null || echo "0")
          echo "Number of active sources: $SOURCES_COUNT"
          echo "‚úÖ Sources API working correctly"
        else
          echo "‚ÑπÔ∏è Sources API responding (normal for new deployment)"
        fi

        # Check S3 backup bucket access (backup only)
        echo "Checking S3 backup bucket access..."
        aws s3 ls s3://seattle-family-activities-mvp-data-usw2/ --region us-west-2 >/dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "‚úÖ S3 backup bucket accessible"
        else
          echo "‚ö†Ô∏è S3 backup bucket not accessible"
        fi

  # Frontend deployment - GitHub Pages
  deploy-frontend:
    if: github.event_name == 'workflow_dispatch' && inputs.deploy_frontend == true || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Test frontend JavaScript
      run: |
        # Basic JavaScript syntax check for main frontend
        node -c app/script.js
        echo "Main frontend JavaScript syntax is valid"

        # Basic JavaScript syntax check for admin interface
        node -c app/admin.js
        echo "Admin frontend JavaScript syntax is valid"

    - name: Validate HTML
      run: |
        # Check main frontend HTML structure
        grep -q "<html" app/index.html
        grep -q "<body" app/index.html
        grep -q "script.js" app/index.html
        echo "Main frontend HTML structure is valid"

        # Check admin frontend HTML structure
        grep -q "<html" app/admin.html
        grep -q "<body" app/admin.html
        grep -q "admin.js" app/admin.html
        echo "Admin frontend HTML structure is valid"

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './app'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # End-to-end testing
  test-e2e:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-frontend.result == 'success')

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2

    - name: Setup Node.js for testing
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Wait for API Gateway deployment
      run: |
        echo "Waiting for API Gateway to be fully deployed..."
        sleep 30

        # Check if API Gateway exists with retries
        for i in {1..5}; do
          echo "Attempt $i: Checking API Gateway deployment..."
          API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
          if [ -n "$API_ID" ] && [ "$API_ID" != "None" ]; then
            echo "‚úÖ API Gateway found: $API_ID"
            break
          else
            echo "‚è≥ API Gateway not ready yet, waiting..."
            sleep 15
          fi
        done

    - name: Test API CORS configuration
      run: |
        echo "Testing API CORS configuration..."

        # Get API Gateway ID with correct JMESPath syntax
        API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
        echo "API Gateway ID: $API_ID"

        if [ -z "$API_ID" ] || [ "$API_ID" == "None" ]; then
          echo "‚ö†Ô∏è API Gateway not found - this may be normal if deployment is still in progress"
          echo "Skipping CORS test"
        else
          # Test CORS preflight for the database API
          echo "Testing CORS for: https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/api/events/approved"
          curl -H "Origin: https://guanghao479.github.io" \
               -H "Access-Control-Request-Method: GET" \
               -H "Access-Control-Request-Headers: Content-Type" \
               -X OPTIONS \
               "https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/api/events/approved" \
               -v || echo "CORS test failed - may be normal for new deployment"
        fi

    - name: Test Database API endpoint
      run: |
        # Get API Gateway ID with correct syntax
        API_ID=$(aws apigateway get-rest-apis --region us-west-2 --query 'items[?name==`SeattleFamilyActivities-AdminAPI`].id' --output text)
        echo "API Gateway ID: $API_ID"

        if [ -z "$API_ID" ] || [ "$API_ID" == "None" ]; then
          echo "‚ö†Ô∏è API Gateway not found - checking if deployment is still in progress"
          echo "Listing all APIs:"
          aws apigateway get-rest-apis --region us-west-2 --query 'items[].{Name:name,Id:id}' --output table
          echo "Skipping API endpoint test"
        else
          API_URL="https://${API_ID}.execute-api.us-west-2.amazonaws.com/prod/"
          echo "Testing database API: ${API_URL}api/events/approved"

          response=$(curl -s "${API_URL}api/events/approved" || echo '{"error": "API not accessible"}')
          echo "API Response: $response"

          # Check if API is responding
          if echo "$response" | jq -e '.success' >/dev/null 2>&1; then
            activities_count=$(echo "$response" | jq '.data | length')
            echo "Found $activities_count approved events in database"
            echo "‚úÖ Database API endpoint is working"
          elif echo "$response" | jq . >/dev/null 2>&1; then
            echo "‚ÑπÔ∏è Database API responding but no approved events yet (normal for fresh deployment)"
            echo "‚úÖ API is accessible and will serve data once events are approved"
          else
            echo "‚ö†Ô∏è API not responding correctly: $response"
            echo "This may be normal immediately after deployment (Lambda cold start)"
          fi
        fi

        # Test S3 backup endpoint
        echo "Testing S3 backup endpoint..."
        s3_response=$(curl -s https://seattle-family-activities-mvp-data-usw2.s3.us-west-2.amazonaws.com/activities/latest.json || echo '{}')
        if echo "$s3_response" | jq -e '.activities' >/dev/null 2>&1; then
          s3_count=$(echo "$s3_response" | jq '.activities | length')
          echo "S3 backup contains $s3_count activities"
        else
          echo "‚ÑπÔ∏è S3 backup not populated yet (normal - created after event approval)"
        fi

    - name: Test frontend accessibility
      run: |
        # Install playwright for testing
        npm install playwright
        npx playwright install chromium
        
        # Create a simple test script
        cat > test-frontend.js << 'EOF'
        const { chromium } = require('playwright');
        
        (async () => {
          const browser = await chromium.launch();
          const page = await browser.newPage();
          
          try {
            // Test the GitHub Pages deployment with new API integration
            await page.goto('https://guanghao479.github.io/bmw/', { waitUntil: 'networkidle' });
            
            // Check if the page loads
            const title = await page.title();
            console.log('Page title:', title);
            
            // Check if main elements exist
            const searchInput = await page.$('#searchInput');
            const filterButtons = await page.$$('.filter-btn');
            const contentGrid = await page.$('#contentGrid');
            
            if (searchInput && filterButtons.length > 0 && contentGrid) {
              console.log('‚úÖ Frontend elements loaded successfully');
            } else {
              console.log('‚ùå Missing frontend elements');
              process.exit(1);
            }
            
            // Wait for data to load and check if activities are displayed
            await page.waitForTimeout(8000); // Longer wait for API calls
            const cards = await page.$$('.card');
            console.log(`Found ${cards.length} activity cards`);

            // Check data source indicator
            const dataSource = await page.evaluate(() => {
              return window.app ? window.app.lastDataSource : 'unknown';
            });
            console.log(`Data source: ${dataSource}`);

            if (cards.length > 0) {
              console.log('‚úÖ Activities are being displayed');
              if (dataSource === 'api') {
                console.log('‚úÖ Using new database API');
              } else if (dataSource === 'cache') {
                console.log('‚ÑπÔ∏è Using cached data');
              } else {
                console.log('‚ÑπÔ∏è Using embedded/fallback data');
              }
            } else {
              console.log('‚ö†Ô∏è No activities displayed (may be new deployment with no approved events)');
            }
            
          } catch (error) {
            console.error('‚ùå Frontend test failed:', error);
            process.exit(1);
          } finally {
            await browser.close();
          }
        })();
        EOF
        
        node test-frontend.js

    - name: Performance audit
      run: |
        # Install lighthouse
        npm install -g lighthouse
        
        # Run lighthouse audit
        lighthouse https://guanghao479.github.io/bmw/ \
          --only-categories=performance,accessibility \
          --output=json \
          --output-path=./lighthouse-report.json \
          --chrome-flags="--headless"
        
        # Parse results
        performance_score=$(cat lighthouse-report.json | jq '.categories.performance.score * 100')
        accessibility_score=$(cat lighthouse-report.json | jq '.categories.accessibility.score * 100')
        
        echo "Performance Score: $performance_score/100"
        echo "Accessibility Score: $accessibility_score/100"
        
        # Set minimum thresholds
        if (( $(echo "$performance_score >= 70" | bc -l) )); then
          echo "‚úÖ Performance score meets threshold"
        else
          echo "‚ö†Ô∏è Performance score below threshold (70)"
        fi
        
        if (( $(echo "$accessibility_score >= 90" | bc -l) )); then
          echo "‚úÖ Accessibility score meets threshold"
        else
          echo "‚ùå Accessibility score below threshold (90)"
          exit 1
        fi

  # Cleanup and notifications
  notify-status:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, test-e2e]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "üöÄ Deployment Summary:"
        echo "Backend: ${{ needs.deploy-backend.result }}"
        echo "Frontend: ${{ needs.deploy-frontend.result }}" 
        echo "E2E Tests: ${{ needs.test-e2e.result }}"
        
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "‚úÖ Full deployment successful!"
          echo "üåê Frontend: https://guanghao479.github.io/bmw/"
          echo "üìä Database API: [API Gateway URL]/api/events/approved"
          echo "üóÑÔ∏è S3 Backup: https://seattle-family-activities-mvp-data-usw2.s3.us-west-2.amazonaws.com/activities/latest.json"
        else
          echo "‚ùå Deployment had issues - check individual job results"
        fi